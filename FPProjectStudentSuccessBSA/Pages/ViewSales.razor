<AuthorizeView>
    @page "/viewsales"
    @using FPProjectStudentSuccess.Entities;

    @inject FPProjectStudentSuccessBSA.Service.SalesService SaleSrv

    <h3>View Sales</h3>
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter Sales by Product Name, Quantity, Total or Salesperson"
               @bind="Filter"
               @bind:event="oninput">
    </div>
    <table class="table">
        <thead class="thead">
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Sales Total</th>
                <th>Salesperson</th>
            </tr>
        </thead>
        <tbody>
            @if (salesList != null)
            {
                @foreach (var sale in salesList)
                {
                    using (var ctx = new FPProjectStudentSuccessDBContext())
                    {
                        var getName = ctx.Users.Where(x => x.Id == sale.UserId).First();
                        Salesperson = getName.Email;
                    }

                    if (!IsVisible(sale))
                        continue;
                    <tr>
                        <td>@sale.ProductName</td>
                        <td>@sale.Quantity</td>
                        <td>@sale.SalesTotal</td>
                        <td>@Salesperson</td>
                    </tr>
                }
            }
            else
            {
                <p><em>Loading...</em></p>
            }
        </tbody>
    </table>
</AuthorizeView>

@code {
    public List<Sales> salesList = new List<Sales>();
    public string Filter { get; set; }
    public string Salesperson { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        salesList = await SaleSrv.GetSalesAsync();
    }

    public bool IsVisible(Sales sale)
    {
        if (string.IsNullOrEmpty(Filter)) { return true; }
        else if (sale.ProductName.Contains(Filter, StringComparison.OrdinalIgnoreCase)) { return true; }
        else if (Salesperson.Contains(Filter, StringComparison.OrdinalIgnoreCase)) { return true; }
        else if (sale.Quantity.ToString().StartsWith(Filter) || sale.SalesTotal.ToString().StartsWith(Filter)) { return true; }
        else { return false; }
    }
}
